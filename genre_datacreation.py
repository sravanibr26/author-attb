# -*- coding: utf-8 -*-
"""Genre_dataCreation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbwc7oZMSKJmD2yRYUQM0uxegwc881Q6
"""

import nltk
nltk.download('punkt')
from nltk import tokenize
import numpy as np
import random
import pandas as pd

def split_text(filepath, min_char):
    """Convert text file to a list of sentences.

    Args:
    filepath: string. Filepath of text file.
    min_char: int. Minimum number of characters required for a sentence to be
    included.
    Returns:
    sentences: list of strings. List of sentences containined in the text file.
    """
    # Load data into string variable and remove new line characters
    file = open(filepath, "r", encoding="utf8")
    text = file.read().replace('\n', ' ')
    text = text.replace('.”', '”.').replace('."', '".').replace('?”', '”?').replace('!”', '”!')
    text = text.replace('--', ' ').replace('. . .', '').replace('_', '')
    file.close()

    # Split text into a list of sentences
    sentences = tokenize.sent_tokenize(text)

    # Remove sentences that are less than min_char long
    sentences = [sent for sent in sentences if len(sent) >= min_char]

    return list(sentences)

min_char = 5



childrens = split_text('Just So Stories (1).txt', min_char = min_char)\
        + split_text('Old Granny Fox (1).txt', min_char = min_char)\
        + split_text('The Tale of Peter Rabbit (1).txt', min_char = min_char)\
        + split_text('The Life and Adventures of Santa Claus (1).txt', min_char = min_char)\
        + split_text('Andersens Fairy Tales .txt', min_char = min_char)





literature = split_text('Flappers and Philosophers.txt', min_char = min_char)\
        + split_text('Kidnapped.txt', min_char = min_char)\
        + split_text('The Prussian Officer.txt', min_char = min_char)\
        + split_text('Whirligigs.txt', min_char = min_char)\
        + split_text('The Queens cadet and other tales.txt', min_char = min_char)


religion = split_text('The Worlds Greatest Books — Volume 13 — Religion and Philosophy.txt', min_char = min_char)\
        + split_text('The Idea of God in Early Religions.txt', min_char = min_char)\
        + split_text('The Everlasting Man.txt', min_char = min_char)\
        + split_text('Myth, Ritual and Religion, Vol. 1 (of 2).txt', min_char = min_char)\
        + split_text('Modern Religious Cults and Movements.txt', min_char = min_char)

romantic = split_text('Hints for Lovers.txt', min_char = min_char)\
        + split_text('On Love.txt', min_char = min_char)\
        + split_text('Primitive Love and Love-Stories.txt', min_char = min_char)\
        + split_text('The Book of Love.txt', min_char = min_char)\
        + split_text('The Lady of the Lake.txt', min_char = min_char)

sciencefic = split_text('Beyond the Black River.txt', min_char = min_char)\
        + split_text('The Big Trip Up Yonder.txt', min_char = min_char)\
        + split_text('The Blue Star.txt', min_char = min_char)\
        + split_text('The House on the Borderland.txt', min_char = min_char)\
        + split_text('Triplanetary.txt', min_char = min_char)

sports = split_text('Handbook of Summer Athletic Sports.txt', min_char = min_char)\
        + split_text('New Ideas for American Boys; The Jack of All Trades.txt', min_char = min_char)\
        + split_text('The School of Recreation (1684 edition).txt', min_char = min_char)\
        + split_text('The Sportswomans Library, Vol. 1 of 2.txt', min_char = min_char)\
        + split_text('Walkers manly exercises.txt', min_char = min_char)

travel = split_text('Across Asia on a Bicycle.txt', min_char = min_char)\
        + split_text('From Egypt to Japan.txt', min_char = min_char)\
        + split_text('Nooks and Corners of Old England.txt', min_char = min_char)\
        + split_text('Sea and Sardinia.txt', min_char = min_char)\
        + split_text('Six Months at the Cape.txt', min_char = min_char)

# Print length of each list

text_dict = { 'Childrens': childrens,
             'Literature': literature,
             'Religion': religion,
             'Romantic': romantic ,
             'Sciencefic': sciencefic,
             'Sports': sports,
             'Travel': travel }

for key in text_dict.keys():
    print(key, ':', len(text_dict[key]))

# Set random seed
np.random.seed(1)

# Set length parameter
max_len = 7000

# Select sentences
names = [childrens,literature,religion,romantic,sciencefic, sports,travel ]
combined = []

for name in names:
    name = np.random.choice(name, max_len, replace = False)
    combined += list(name)

print('The length of the combined list is:', len(combined))

labels =  ['Childrens']*max_len + ['Literature']*max_len\
         + ['Religion']*max_len + ['Romantic']*max_len + ['Sciencefic']*max_len + ['Sports']*max_len\
          + ['Travel']*max_len

print('The length of the labels list is:', len(labels))

# Set random seed
random.seed(3)

# Randomly shuffle data
zipped = list(zip(combined, labels))
random.shuffle(zipped)
combined, labels = zip(*zipped)

# Create pandas dataframe
out_data = pd.DataFrame()
out_data['text'] = combined
out_data['genre'] = labels

print(out_data.head())

# Export as a csv file
out_data.to_csv('genre_data_clean1.csv', index=False)